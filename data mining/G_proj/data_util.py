import numpy as np


def get_data(data):
    '''
    For Decision-Tree and RandomForest algorithm, we retain ip, app, device, os, channel attributes
    '''
    ip = np.asarray(data['ip']).reshape(-1, 1)
    app = np.asarray(data['app']).reshape(-1, 1)
    device = np.asarray(data['device']).reshape(-1, 1)
    os = np.asarray(data['os']).reshape(-1, 1)
    channel = np.asarray(data['channel']).reshape(-1, 1)
    y = np.asarray(data['y']).reshape(-1, 1)

    result = np.concatenate((ip, app, device, os, channel, y), axis=1)
    np.random.shuffle(result)

    return result[:, 0: -1], result[:, -1]


def get_knn_data(data):
    '''
    For KNN algorithm, we only retain ip, device, os, channel attributes.
    '''
    ip = np.asarray(data['ip']).reshape(-1, 1)
    device = np.asarray(data['device']).reshape(-1, 1)
    os = np.asarray(data['os']).reshape(-1, 1)
    channel = np.asarray(data['channel']).reshape(-1, 1)
    y = np.asarray(data['y']).reshape(-1, 1)

    result = np.concatenate((ip, device, os, channel, y), axis=1)
    np.random.shuffle(result)

    return result


def eval_result(predict_y, true_label):
    '''
    Param:
    - predict_y: predicted label generated by model
    - true_label: true label given in dataset.
    '''
    # Incase of dividing by 0:
    eps = 1e-11

    assert len(predict_y) == len(true_label)
    total = len(predict_y)

    # Calculate precission, recall, f1-score:
    tp = tn = fp = fn = 0
    for i in range(total):
        if true_label[i] == 1:
            if predict_y[i] == 1:
                tp += 1
            else:
                fn += 1
        else:
            if predict_y[i] == 1:
                fp += 1
            else:
                tn += 1

    accuracy = (tp + tn) / (tp + tn + fp + fn + eps)
    precision = tp / (tp + fp + eps)
    recall = tp / (tp + fn + eps)
    f1 = (2 * precision * recall) / (precision + recall + eps)

    print('Accuracy score:', accuracy)
    print('Precission score:', precision)
    print('Recall score:', recall)
    print('F1 score score:', f1)
